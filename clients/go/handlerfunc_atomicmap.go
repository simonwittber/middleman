// Generated by: main
// TypeWriter: atomicmap
// Directive: +gen on HandlerFunc

package middleman

import (
	"sync"
	"sync/atomic"
)

// HandlerFuncAtomicMap is a copy-on-write thread-safe map of HandlerFunc
type HandlerFuncAtomicMap struct {
	mu  sync.Mutex
	val atomic.Value
}

type _HandlerFuncMap map[string]HandlerFunc

// NewHandlerFuncAtomicMap returns a new initialized HandlerFuncAtomicMap
func NewHandlerFuncAtomicMap() *HandlerFuncAtomicMap {
	am := &HandlerFuncAtomicMap{}
	am.val.Store(make(_HandlerFuncMap, 0))
	return am
}

// Get returns a HandlerFunc for a given key
func (am *HandlerFuncAtomicMap) Get(key string) (value HandlerFunc, ok bool) {
	value, ok = am.val.Load().(_HandlerFuncMap)[key]
	return value, ok
}

// GetAll returns the underlying map of HandlerFunc
// this map must NOT be modified, to change the map safely use the Set and Delete
// functions and Get the value again
func (am *HandlerFuncAtomicMap) GetAll() map[string]HandlerFunc {
	return am.val.Load().(_HandlerFuncMap)
}

// Len returns the number of elements in the map
func (am *HandlerFuncAtomicMap) Len() int {
	return len(am.val.Load().(_HandlerFuncMap))
}

// Set inserts in the map a HandlerFunc under a given key
func (am *HandlerFuncAtomicMap) Set(key string, value HandlerFunc) {
	am.mu.Lock()
	defer am.mu.Unlock()

	m1 := am.val.Load().(_HandlerFuncMap)
	m2 := make(_HandlerFuncMap, len(m1)+1)
	for k, v := range m1 {
		m2[k] = v
	}

	m2[key] = value
	am.val.Store(m2)
	return
}

// Delete removes the HandlerFunc under key from the map
func (am *HandlerFuncAtomicMap) Delete(key string) {
	am.mu.Lock()
	defer am.mu.Unlock()

	m1 := am.val.Load().(_HandlerFuncMap)
	_, ok := m1[key]
	if !ok {
		return
	}

	m2 := make(_HandlerFuncMap, len(m1)-1)
	for k, v := range m1 {
		if k != key {
			m2[k] = v
		}
	}

	am.val.Store(m2)
	return
}
